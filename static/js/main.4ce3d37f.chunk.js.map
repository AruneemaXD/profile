{"version":3,"sources":["photo1.jpg","NavBar.js","About.js","Projects.js","EForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","Navbar_default","bg","variant","expand","Container","Brand","Nav_default","className","Link","href","Collapse","Component","About","name","Projects","EForm","action","method","enctype","align","type","value","React","App","src_NavBar","src_About","src_Projects","src_EForm_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2OCgCzBC,mLArBT,OAENC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACnCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACDP,EAAAC,EAAAC,cAACC,EAAAF,EAAOO,MAAR,4BAECR,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACDP,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAKS,UAAU,WACbV,EAAAC,EAAAC,cAACO,EAAAR,EAAIU,KAAL,CAAUC,KAAK,SAAf,UACAZ,EAAAC,EAAAC,cAACO,EAAAR,EAAIU,KAAL,CAAUC,KAAK,aAAf,cACAZ,EAAAC,EAAAC,cAACO,EAAAR,EAAIU,KAAL,CAAUC,KAAK,YAAf,eAIJZ,EAAAC,EAAAC,cAACC,EAAAF,EAAOY,SAAR,cAhBmBC,aCaNC,sMAZX,OACCf,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,KAAGc,KAAK,SACRhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,SAAf,wBACHV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WAAf,4CAPkBI,cCwBLG,mLApBX,OACCjB,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,KAAGc,KAAK,aACRhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,SAAf,eACHV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WAAf,YAEUV,EAAAC,EAAAC,cAAA,WAFV,YAGUF,EAAAC,EAAAC,cAAA,WAHV,YAIUF,EAAAC,EAAAC,cAAA,WAJV,YAKUF,EAAAC,EAAAC,cAAA,oBAZWY,aCeRI,0LAlBX,OACGlB,EAAAC,EAAAC,cAAA,QAAMiB,OAAO,oCAAoCC,OAAO,OAAOC,QAAQ,aAAaC,MAAM,UAC7FtB,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OAAOP,KAAK,UAE1BhB,EAAAC,EAAAC,cAAA,uBAEEF,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OAAOP,KAAK,UAE1BhB,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,SAASC,MAAM,oBAbRC,IAAMX,YCuCdY,mLA9BX,OAEA1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,MAGA3B,EAAAC,EAAAC,cAAC0B,EAAD,MAGA5B,EAAAC,EAAAC,cAAC2B,EAAD,MAIA7B,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACKP,EAAAC,EAAAC,cAAC4B,EAAD,gBAnBKhB,aCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ce3d37f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo1.0e1ecfe0.jpg\";","import React,{Component} from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container} from 'reactstrap';\r\n\r\n\r\n\r\n\r\nclass NavBar extends Component {\r\n   render(){\r\n      return (\r\n\r\n<Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\r\n     <Container>\r\n    <Navbar.Brand>ARUNEEMA DESHMUKH </Navbar.Brand>\r\n     </Container>\r\n     <Container>\r\n    <Nav className=\"ml-auto\">\r\n      <Nav.Link href=\"#home\"> Home </Nav.Link>\r\n      <Nav.Link href=\"#projects\"> Projects </Nav.Link>\r\n      <Nav.Link href=\"#connect\"> Connect </Nav.Link>\r\n    </Nav>\r\n     </Container>\r\n  \r\n  <Navbar.Collapse>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n  );\r\n }\r\n}\r\n\r\nexport default NavBar;","import React,{Component} from 'react';\r\nimport './white-indigo.css';\r\nimport './styles.css';\r\nimport './reset.css';\r\n\r\n\r\n\r\nclass About extends Component {\r\n   render(){\r\n\r\n    return (\r\n    \t<main>\r\n    \t<a name=\"home\"></a>\r\n    \t<div className=\"intro\">Hello, I'm Aruneema!</div>                                                                                                                                \r\n\t\t<div className=\"tagline\">I am trying to make a website :)</div>\r\n\t\t\r\n    </main>\r\n    \r\n  );\r\n }\r\n}\r\n\r\nexport default About;\r\n\r\n \r\n","import React,{Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles.css';\r\nimport './reset.css';\r\nimport './white-indigo.css';\r\n\r\n\t\r\n\r\nclass Projects extends Component {\r\n   render(){\r\n\r\n    return (\r\n    \t<main>\r\n    \t<a name=\"projects\"></a>\r\n    \t<div className=\"intro\">My projects</div>                                                                                                                                \r\n\t\t<div className=\"tagline\">\r\n\t\t\r\n\t\t\tPROJECT 1<br></br>\r\n\t\t\tPROJECT 2<br></br>\r\n\t\t\tPROJECT 3<br></br>\r\n\t\t\tPROJECT 4<br></br>\r\n\t\t\t\r\n\t    </div>\r\n\t\t\r\n    </main>\r\n    \r\n  );\r\n }\r\n}\r\n\r\n\r\nexport default Projects;\r\n","import React,{Component} from 'react';\r\nimport './EForm.css'\r\n\r\n   class EForm extends React.Component {\r\n  render() {\r\n    return (\r\n       <form action=\"mailto:aruneemadeshmukh@gmail.com\" method=\"post\" enctype=\"text/plain\" align=\"center\" >\r\n\t\t  <label>\r\n\t\t    Name:-       \r\n\t\t    <input type=\"text\" name=\"name\" />\r\n\t\t  </label>\r\n\t\t  <label>\r\n\t\t    Email:-   \r\n\t\t    <input type=\"text\" name=\"mail\" />\r\n\t\t  </label>\r\n\t\t  <label>\r\n\t\t  <input type=\"submit\" value=\"Submit\" />\r\n\t\t  </label>\r\n\t\t</form> \r\n  );\r\n }\r\n}\r\n\r\nexport default EForm;","import React,{Component} from 'react';\nimport photo1 from './photo1.jpg';\nimport NavBar from './NavBar';\nimport About from './About';\nimport Projects from './Projects';\nimport EForm from './EForm';\nimport {Container} from 'reactstrap';\n\n \nclass App extends Component {\n   render(){\n\n    return (\n\n    <div>\n      <NavBar>\n  \t  </NavBar>\n\n      <About>\n      </About>\n      \n      <Projects>\n      </Projects>\n\n       \n      <footer>\n       <hr/>\n        <Container>\n             <EForm>\n  \t         </EForm>\n        </Container>\n      </footer>\n         \n        \n\n    </div>\n    \n  );\n }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}